package ru.goryachev.multichief.construction.repository;

import org.junit.jupiter.api.*;
import org.assertj.core.api.Assertions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Rollback;
import ru.goryachev.multichief.construction.app.AppWebInit;
import ru.goryachev.multichief.construction.model.entity.Bim;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

/**
 * CRUD JPA Repository testing with real DB.
 * Necessary to use Lifecycle.PER_CLASS (@TestInstance) to work with common id (testId variable is end-to-end id).
 * An entity with autogenerated ID suppose to be created in the first method (1).
 * The ID will be used in each method (2,4,5).
 * The entity with ID suppose to be deleted in the last one (5).
 * Setting WebEnvironment.NONE does not start the embedded servlet container (MultiChief does not use embedded).
 * @author Lev Goryachev
 * @version 1.0
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@SpringBootTest(classes = AppWebInit.class, webEnvironment = SpringBootTest.WebEnvironment.NONE)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class BimRepositoryTest {

    Long testId;

    @Autowired
    private BimRepository bimRepository;

    @Test
    @Order(1)
    @Rollback(value = false)
    public void saveBimTest(){
        Bim bim = new Bim();
        bim.setProjectCodeNumber("testValueAbc");
        bim.setProjectName("testValueDef");
        bim.setLod(Short.valueOf("5"));
        bim.setLink("testValueXyz");
        Bim savedBim = bimRepository.save(bim);
        this.testId = savedBim.getId();
        Assertions.assertThat(savedBim.getId()).isGreaterThan(0);
    }

    @Test
    @Order(2)
    public void getBimTest(){
        Bim bim = bimRepository.findById(testId).get();
        Assertions.assertThat(bim.getId()).isEqualTo(testId);
    }

    @Test
    @Order(3)
    public void getAllBimsTest(){
        List<Bim> bims = bimRepository.findAll();
        Assertions.assertThat(bims.size()).isGreaterThan(0);
    }

    @Test
    @Order(4)
    @Rollback(value = false)
    public void updateBimTest(){
        Bim bim = bimRepository.findById(testId).get();
        bim.setProjectCodeNumber("testValueChanged");
        Bim bimUpdated =  bimRepository.save(bim);
        Assertions.assertThat(bimUpdated.getProjectCodeNumber()).isEqualTo("testValueChanged");
    }

    @Test
    @Order(5)
    @Rollback(value = false)
    public void deleteBimTest(){

        Bim bim = bimRepository.findById(testId).get();
        bimRepository.delete(bim);

        //bimRepo.deleteById(1L);

        Bim bimEmpty = null;
        Optional<Bim> optionalBim = bimRepository.findById(testId);
        if(optionalBim.isPresent()){
            bimEmpty = optionalBim.get();
        }
        Assertions.assertThat(bimEmpty).isNull();
    }
}