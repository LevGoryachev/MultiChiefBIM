package ru.goryachev.multichief.construction.repository;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Rollback;
import ru.goryachev.multichief.construction.app.AppWebInit;
import ru.goryachev.multichief.construction.model.entity.Construction;

import java.util.List;
import java.util.Optional;

/**
 * CRUD JPA Repository testing with real DB.
 * Necessary to use Lifecycle.PER_CLASS (@TestInstance) to work with common id (testId variable is end-to-end id).
 * An entity with autogenerated ID suppose to be created in the first method (1).
 * The ID will be used in each method (2,4,5).
 * The entity with ID suppose to be deleted in the last one (5).
 * Setting WebEnvironment.NONE does not start the embedded servlet container (MultiChief does not use embedded).
 * @author Lev Goryachev
 * @version 1.0
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@SpringBootTest(classes = AppWebInit.class, webEnvironment = SpringBootTest.WebEnvironment.NONE)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ConstructionRepositoryTest {

    Long testId;

    @Autowired
    private ConstructionRepository constructionRepository;

    @Test
    @Order(1)
    @Rollback(value = false)
    public void saveConstructionTest(){
        Construction construction = new Construction();
        construction.setObjectCodeNumber("testValueAbc");
        construction.setObjectName("testValueDef");
        construction.setObjectDescription("testValueXyz");
        construction.setIsLinear(true);

        Construction savedConstruction = constructionRepository.save(construction);
        this.testId = savedConstruction.getId();
        Assertions.assertThat(savedConstruction.getId()).isGreaterThan(0);
    }

    @Test
    @Order(2)
    public void getConstructionTest(){
        Construction construction = constructionRepository.findById(testId).get();
        Assertions.assertThat(construction.getId()).isEqualTo(testId);
    }
    @Test
    @Order(3)
    public void getAllConstructionsTest(){
        List<Construction> constructions = constructionRepository.findAll();
        Assertions.assertThat(constructions.size()).isGreaterThan(0);
    }

    @Test
    @Order(4)
    @Rollback(value = false)
    public void updateConstructionTest(){

        Construction construction = constructionRepository.findById(testId).get();
        construction.setObjectCodeNumber("testValueChanged");
        Construction constructionUpdated =  constructionRepository.save(construction);
        Assertions.assertThat(constructionUpdated.getObjectCodeNumber()).isEqualTo("testValueChanged");
    }

    @Test
    @Order(5)
    @Rollback(value = false)
    public void deleteConstructionTest(){

        Construction construction = constructionRepository.findById(testId).get();
        constructionRepository.delete(construction);

        //constructionRepo.deleteById(1L);

        Construction constructionEmpty = null;
        Optional<Construction> optionalConstruction = constructionRepository.findById(testId);

        if(optionalConstruction.isPresent()){
            constructionEmpty = optionalConstruction.get();
        }

        Assertions.assertThat(constructionEmpty).isNull();
    }
}