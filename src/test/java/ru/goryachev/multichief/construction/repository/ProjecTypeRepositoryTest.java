package ru.goryachev.multichief.construction.repository;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Rollback;
import ru.goryachev.multichief.construction.app.AppWebInit;
import ru.goryachev.multichief.construction.model.entity.ProjectType;

import java.util.List;
import java.util.Optional;

/**
 * CRUD JPA Repository testing with real DB.
 * Necessary to use Lifecycle.PER_CLASS (@TestInstance) to work with common id (testId variable is end-to-end id).
 * An entity with autogenerated ID suppose to be created in the first method (1).
 * The ID will be used in each method (2,4,5).
 * The entity with ID suppose to be deleted in the last one (5).
 * Setting WebEnvironment.NONE does not start the embedded servlet container (MultiChief does not use embedded).
 * @author Lev Goryachev
 * @version 1.0
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@SpringBootTest(classes = AppWebInit.class, webEnvironment = SpringBootTest.WebEnvironment.NONE)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ProjecTypeRepositoryTest {

    Long testId;

    @Autowired
    private ProjectTypeRepository projectTypeRepository;

    @Test
    @Order(1)
    @Rollback(value = false)
    public void saveProjectTypeTest(){
        ProjectType projectType = new ProjectType();
        projectType.setTypeName("testValueAbc");


        ProjectType savedProjectType = projectTypeRepository.save(projectType);
        this.testId = savedProjectType.getId();
        Assertions.assertThat(savedProjectType.getId()).isGreaterThan(0);
    }

    @Test
    @Order(2)
    public void getProjectTypeTest(){
        ProjectType projectType = projectTypeRepository.findById(testId).get();
        Assertions.assertThat(projectType.getId()).isEqualTo(testId);
    }

    @Test
    @Order(3)
    public void getAllProjectTypesTest(){
        List<ProjectType> projectTypes = projectTypeRepository.findAll();
        Assertions.assertThat(projectTypes.size()).isGreaterThan(0);
    }

    @Test
    @Order(4)
    @Rollback(value = false)
    public void updateProjectTypeTest(){
        ProjectType projectType = projectTypeRepository.findById(testId).get();
        projectType.setTypeName("testValueChanged");
        ProjectType projectTypeUpdated =  projectTypeRepository.save(projectType);
        Assertions.assertThat(projectTypeUpdated.getTypeName()).isEqualTo("testValueChanged");
    }

    @Test
    @Order(5)
    @Rollback(value = false)
    public void deleteProjectTypeTest(){

        ProjectType projectType = projectTypeRepository.findById(testId).get();
        projectTypeRepository.delete(projectType);

        //projectTypeRepo.deleteById(1L);

        ProjectType projectTypeEmpty = null;
        Optional<ProjectType> optionalProjectType = projectTypeRepository.findById(testId);
        if(optionalProjectType.isPresent()){
            projectTypeEmpty = optionalProjectType.get();
        }
        Assertions.assertThat(projectTypeEmpty).isNull();
    }
}